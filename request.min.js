function request(e){return new Promise((t,a)=>{if(null==e)return a({message:"A config object must be passed to request()."});if(!e.hasOwnProperty("type"))return a({message:"A config object must be given a 'type' property."});if(!e.hasOwnProperty("url"))return a({message:"A config object must be given a 'url' property."});if(!("POST"!==e.type.toUpperCase()&&"PUT"!==e.type.toUpperCase()&&"PATCH"!==e.type.toUpperCase()||e.hasOwnProperty("data")&&null!==e.data&&void 0!==e.data&&""!==e.data))return a({message:"A 'data' property and value (!null, !undefined, nor '') must be included with POST, PUT, and PATCH requests."});if("DELETE"===e.type.toUpperCase()&&e.hasOwnProperty("data")&&(null===e.data||void 0===e.data||""===e.data))return a({message:"When including a 'data' property with a DELETE request, the value must not be null, undefined, or ''."});e.hasOwnProperty("async")||(e.async=!0),e.type=e.type.toUpperCase();const n=new XMLHttpRequest;n.open(e.type,e.url,e.async),e.hasOwnProperty("data")&&("object"!=typeof e.data||e.data instanceof FormData?"string"==typeof e.data&&n.setRequestHeader("Content-type","application/x-www-form-urlencoded"):(n.setRequestHeader("Content-type","application/json"),e.data=JSON.stringify(e.data))),e.hasOwnProperty("timeout")&&!0===e.async&&(n.timeout=e.timeout),n.onload=function(){if(0!==this.status)return t(n)},n.onerror=function(e){return a({message:"Their was an error with the request."})},n.ontimeout=function(){return a({message:"The request timed out."})},"GET"===e.type?n.send():"POST"===e.type||"PUT"===e.type||"PATCH"===e.type?n.send(e.data):"DELETE"===e.type&&(e.hasOwnProperty("data")?n.send(e.data):n.send())})}